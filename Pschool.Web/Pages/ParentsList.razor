@using Microsoft.JSInterop
@using Pschool.Web.Models;
@inject IJSRuntime JSRuntime
@page "/parents"
@inject HttpClient Http

<h3>Parents</h3><hr />

@if (parents == null)
{
    <p>Loading...</p>
}
else
{
    <NavLink style="float:right" class="btn btn-success" href="parents/create">Add Parent <span class="oi oi-plus" aria-hidden="true"></span></NavLink>
    <table class="table">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>User Name</th>
                <th>Email</th>
                <th>Home Address</th>
                <th>Phone 1</th>
                <th>Work Phone</th>
                <th>Home Phone</th>
                <th>Siblings</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var parent in parents)
            {
                <tr>
                    <td>@parent.FirstName</td>
                    <td>@parent.LastName</td>
                    <td>@parent.UserName</td>
                    <td>@parent.Email</td>
                    <td>@parent.HomeAddress</td>
                    <td>@parent.Phone1</td>
                    <td>@parent.WorkPhone</td>
                    <td>@parent.HomePhone</td>
                    <td>@parent.Students?.Count()</td>
               @*     <td>
                        @foreach (var student in parent.Students)
                        {
                            @student.FirstName @student.LastName<br />
                        }
                    </td>*@
                    <td>
                        <i @onclick="() => EditParent(parent.Id)" class="oi oi-pencil"></i>
                        <i @onclick="() => DeleteParent(parent.Id)" class="oi oi-trash"></i>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Parent> parents;
    
    [Inject]
    private NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Fetch parents data from the API
        parents = await Http.GetFromJsonAsync<List<Parent>>("/api/Parent");
    }

    private void EditParent(int parentId)
    {
        NavigationManager.NavigateTo($"/parents/edit/{parentId}");
    }

    private async Task DeleteParent(int parentId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this parent?");

        if (confirmed)
        {
            var response = await Http.DeleteAsync($"api/Parent/{parentId}");

            if (response.IsSuccessStatusCode)
            {
                parents = await Http.GetFromJsonAsync<List<Parent>>("api/Parent");
            }
            else
            {
                // Handle error
            }
        }
    }
}
